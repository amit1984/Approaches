Cheerp: A C++ compiler for the Web
------------------------------------------

Cheerp is a tool to bring C++ programming to the Web,
designed to provide a seamless experience for client/server
development.

Installation
------------------------------------------
Currently Cheerp needs to be unpacked in /opt/cheerp/

Usage
------------------------------------------
Cheerp is integrated in the LLVM/clang infrastructure.
To build client side JavaScript code from C++ source files

	/opt/cheerp/bin/clang -O3 -target cheerp <file1.cpp> <file2.cpp> -o <file.js>

Building objects file separately and linking only at the end is also possible.

	/opt/cheerp/bin/clang++ -O3 -c -target cheerp <file1.cpp> -o <file1.bc>
	/opt/cheerp/bin/clang++ -O3 -c -target cheerp <file2.cpp> -o <file2.bc>
	/opt/cheerp/bin/clang++ -target cheerp <file1.bc> <file2.bc> -o <linkedfile.js>

Libraries can be built as well, they are stored using LLVM binary representation

	/opt/cheerp/bin/clang++ -O3 -c -target cheerp <file1.cpp> -o <file1.bc>
	/opt/cheerp/bin/clang++ -O3 -c -target cheerp <file2.cpp> -o <file2.bc>
	/opt/cheerp/bin/llvm-link <file1.bc> <file2.bc> ... -o <library.bc>

A cmake toolchain file is provided in /opt/cheerp/share/cmake/Modules/CheerpToolchain.cmake
it's possible to cross-compile cmake projects for the Cheerp platform using the syntax

	cmake -DCMAKE_TOOLCHAIN_FILE=/opt/cheerp/share/cmake/Modules/CheerpToolchain.cmake <regular arguments>

Please note that, currently, only building static libraries is supported.

To build a server side executable you will need to have libpion available on the system

	/opt/cheerp/bin/clang++ -cheerp-side=server -O3 /opt/cheerp/share/cheerp/server_stub.cpp /opt/cheerp/share/cheerp/deserializer.cpp <file1.cpp> -o <file1> -lboost_system -lpion-net-4.0 -pthread -lpion-common-4.0 -lboost_thread -lssl -lcrypto -llog4cpp

The files server_stub.cpp and deserializer.cpp provided with Cheerp include boiler plate code to
listen to RPC requests and serve static files in the current directory for testing purposes. The
server binds to port 1987 by default.

Code conventions
------------------------------------------

Methods that should be compiled on the client side should
be marked using the C++11 attribute syntax:

	int f1() [[cheerp::client]]
	{
		...
	}

Methods that are tagged using the [[cheerp::server]] attribute will be treated differently depending on
the -cheerp-side=<client|server> command line option. In client mode they will become stubs for
RPC on the server: they will automatically serialize the arguments and get an answer from the server.
In server mode they will be compiled regularly and server side boiler plate code will forward
each request to the right method.

	int serverTest(int i, float f) [[cheerp::server]]
	{
		return f * 10 + i;
	}

	void webMain() [[cheerp::client]]
	{
		int serverVal = serverTest(10, 0.2f); //This will be compiled as an RPC call
		console.log(serverVal);
	}

Global variables and types that are provided by the browser
environment are accessible through the 'client' namespace

	client::document.addEventListener(...)

Of course, being a regular C++ namespace you can reduce
code verbosity by

	using namespace client;

The relevant headers that defines client interfaces are

	#include <cheerp/client.h> //Misc client side stuff
	#include <cheerp/clientlib.h> //Complete DOM/HTML5 interface
	#include <cheerp/webgl.h> //WebGL interface

By convention the method that will be called first on the
client side should have the following signature

	void webMain() [[cheerp::client]]

NOTE: As usual in JavaScript programming the script will be
loaded before the DOM is completely loaded, and so webMain will
be called on an incomplete document, to execute a callback after
loading is complete you can do this

	void loadCallback() [[cheerp::client]]
	{
		...
	}

	void webMain() [[cheerp::client]]
	{
		document.addEventListener("DOMContentLoaded",Callback(loadCallback));
	}

In a similar way you can bind to any other DOM event

On the client side (JavaScript) the only actually supported numerical types
are 'double' and 'int'.
'float' is supported but it actually has double precision.
16-bit and 8-bit integers suppport may be inefficient.
'long long' is 32-bit wide. 64-bit integers are not supported.

Properties of DOM objects are always accessed through setters/getters

	{
		auto body = document.get_body();
	}

Small examples are included in /opt/cheerp/share/cheerp/examples/

Limitations as of this version
------------------------------------------
Major limitations of this version are:
	-) Virtual bases and covariant returns are not yet supported
